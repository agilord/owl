// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// PostgresSqlGenerator
// **************************************************************************

// Generated by owl 0.2.2
// https://github.com/agilord/owl

// ignore: unused_import, library_prefixes
import 'sql_crud_example.dart';
// ignore: unused_import, library_prefixes
import 'dart:async';
// ignore: unused_import, library_prefixes
import 'package:owl/util/json/core.dart' as _owl_json;
// ignore: unused_import, library_prefixes
import 'package:owl/util/sql/postgresql.dart' as _owl_sql_pg;
// ignore: unused_import, library_prefixes
import 'package:postgres/postgres.dart' as pg;

/// DDL statements for the default schema.
@Deprecated('Use SqlCrudExampleDdl.getDdls() instead.')
final List<String> sqlCrudExampleDdl = SqlCrudExampleDdl.getDdls();

/// DDL statements for a given schema.
@Deprecated('Use SqlCrudExampleDdl.getDdls() instead.')
List<String> getSqlCrudExampleDdl({String schema}) =>
    SqlCrudExampleDdl.getDdls(schema: schema);

/// DDL statements.
abstract class SqlCrudExampleDdl {
  /// DDL statements for a given schema.
  static List<String> getDdls({String schema}) {
    final List<String> results = <String>[];
    results.addAll(getEntityDetailTableDdls(schema: schema));
    results.addAll(getMyCustomEntityTableDdls(schema: schema));
    return results;
  }

  /// DDL statements for a entity_detail.
  static List<String> getEntityDetailTableDdls({String schema, String table}) {
    final String schemaPrefix = schema == null ? '' : schema + '.';
    final String tableName = table ?? 'entity_detail';
    final String fqtn = '$schemaPrefix$tableName';
    return <String>[
      """CREATE TABLE IF NOT EXISTS $fqtn(entity_id INTEGER, detail_id INTEGER, is_active BOOLEAN, PRIMARY KEY(entity_id, detail_id));""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS entity_id INTEGER ;""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS detail_id INTEGER ;""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS is_active BOOLEAN ;"""
    ];
  }

  /// DDL statements for a my_custom_entity.
  static List<String> getMyCustomEntityTableDdls(
      {String schema, String table}) {
    final String schemaPrefix = schema == null ? '' : schema + '.';
    final String tableName = table ?? 'my_custom_entity';
    final String fqtn = '$schemaPrefix$tableName';
    return <String>[
      """CREATE TABLE IF NOT EXISTS $fqtn(entity_id INTEGER, ts TIMESTAMP WITH TIME ZONE, some_other_column TEXT, external_id UUID, version INTEGER, PRIMARY KEY(entity_id));""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS entity_id INTEGER ;""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS ts TIMESTAMP WITH TIME ZONE ;""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS some_other_column TEXT ;""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS external_id UUID ;""",
      """ALTER TABLE $fqtn ADD COLUMN IF NOT EXISTS version INTEGER ;"""
    ];
  }
}

/// CRUD methods for table: my_custom_entity
abstract class MyCustomEntityTable {
  /// table: my_custom_entity
  /// ignore: constant_identifier_names
  static const String MY_CUSTOM_ENTITY = 'my_custom_entity';

  /// column: entity_id
  static const String entityId = 'entity_id';

  /// column: ts
  static const String ts = 'ts';

  /// column: some_other_column
  static const String field = 'some_other_column';

  /// column: external_id
  static const String externalId = 'external_id';

  /// column: version
  static const String version = 'version';

  /// Convert database row to object.
  static EntityMain parseRow(Map<String, Map<String, dynamic>> compositeRow) {
    if (compositeRow == null) return null;
    final Map<String, dynamic> map = compositeRow.values.single;
    final EntityMain object = new EntityMain();
    object.entityId = map['entity_id'] as int;
    object.ts = _owl_json.DateTimeMapper.parse(map['ts']);
    object.field = map['some_other_column'] as String;
    object.externalId = _owl_json.UuidMapper.parse(map['external_id']);
    object.version = map['version'] as int;
    return object;
  }

  /// Convert object to Map.
  static Map<String, dynamic> map(EntityMain object) {
    if (object == null) return null;
    return <String, dynamic>{
      'entity_id': object.entityId,
      'ts': _owl_json.DateTimeMapper.map(object.ts),
      'some_other_column': object.field,
      'external_id': _owl_json.UuidMapper.map(object.externalId),
      'version': object.version,
    };
  }

  /// Insert a row into my_custom_entity.
  static Future<int> create(
    pg.PostgreSQLExecutionContext connection,
    EntityMain entityMain, {
    String schema,
    String table,
    List<String> clear,
    bool strict: true,
    bool ifNotExists: false,
  }) async {
    if (ifNotExists) {
      final EntityMain _x = await read(connection, entityMain.entityId,
          strict: false, schema: schema, table: table);
      if (_x != null) return 0;
    }
    return await new _owl_sql_pg.SimpleCreate(
            schema: schema,
            table: table ?? 'my_custom_entity',
            set: map(entityMain),
            clear: clear)
        .execute(connection, strict: strict);
  }

  /// Read a row from my_custom_entity.
  static Future<EntityMain> read(
    pg.PostgreSQLExecutionContext connection,
    int entityId, {
    String schema,
    String table,
    List<String> columns,
    bool forUpdate: false,
    bool strict: true,
  }) async {
    assert(entityId != null);
    final _row = await new _owl_sql_pg.SimpleSelect(
            schema: schema,
            table: table ?? 'my_custom_entity',
            columns: columns,
            where: <String, dynamic>{'entity_id': entityId},
            limit: (strict ? 2 : 1),
            forUpdate: forUpdate)
        .get(connection, strict: strict);
    return parseRow(_row);
  }

  /// Update a row in my_custom_entity.
  static Future<int> update(
    pg.PostgreSQLExecutionContext connection,
    EntityMain entityMain, {
    String schema,
    String table,
    int version,
    bool autoVersion: false,
    List<String> clear,
    bool strict: true,
  }) async {
    if (autoVersion) {
      assert(version == null);
      // ignore: parameter_assignments
      version = entityMain.version++;
    }
    final Map<String, dynamic> _set = map(entityMain);
    final Map<String, dynamic> _where = <String, dynamic>{
      'entity_id': _set.remove('entity_id'),
      'version': version,
    };
    return await new _owl_sql_pg.SimpleUpdate(
            schema: schema,
            table: table ?? 'my_custom_entity',
            set: _set,
            clear: clear,
            where: _where)
        .execute(connection, strict: strict);
  }

  /// Delete a row from my_custom_entity.
  static Future<int> delete(
    pg.PostgreSQLExecutionContext connection,
    int entityId, {
    String schema,
    String table,
    int version,
    bool strict: true,
  }) async {
    assert(entityId != null);
    return await new _owl_sql_pg.SimpleDelete(
            schema: schema,
            table: table ?? 'my_custom_entity',
            where: <String, dynamic>{'entity_id': entityId, 'version': version})
        .execute(connection, strict: strict);
  }
}

/// CRUD methods for table: entity_detail
abstract class EntityDetailTable {
  /// table: entity_detail
  /// ignore: constant_identifier_names
  static const String ENTITY_DETAIL = 'entity_detail';

  /// column: entity_id
  static const String entityId = 'entity_id';

  /// column: detail_id
  static const String detailId = 'detail_id';

  /// column: is_active
  static const String isActive = 'is_active';

  /// Convert database row to object.
  static EntityDetail parseRow(Map<String, Map<String, dynamic>> compositeRow) {
    if (compositeRow == null) return null;
    final Map<String, dynamic> map = compositeRow.values.single;
    final EntityDetail object = new EntityDetail();
    object.entityId = map['entity_id'] as int;
    object.detailId = map['detail_id'] as int;
    object.isActive = map['is_active'] as bool;
    return object;
  }

  /// Convert object to Map.
  static Map<String, dynamic> map(EntityDetail object) {
    if (object == null) return null;
    return <String, dynamic>{
      'entity_id': object.entityId,
      'detail_id': object.detailId,
      'is_active': object.isActive,
    };
  }

  /// Insert a row into entity_detail.
  static Future<int> create(
    pg.PostgreSQLExecutionContext connection,
    EntityDetail entityDetail, {
    String schema,
    String table,
    List<String> clear,
    bool strict: true,
    bool ifNotExists: false,
  }) async {
    if (ifNotExists) {
      final EntityDetail _x = await read(
          connection, entityDetail.entityId, entityDetail.detailId,
          strict: false, schema: schema, table: table);
      if (_x != null) return 0;
    }
    return await new _owl_sql_pg.SimpleCreate(
            schema: schema,
            table: table ?? 'entity_detail',
            set: map(entityDetail),
            clear: clear)
        .execute(connection, strict: strict);
  }

  /// Read a row from entity_detail.
  static Future<EntityDetail> read(
    pg.PostgreSQLExecutionContext connection,
    int entityId,
    int detailId, {
    String schema,
    String table,
    List<String> columns,
    bool forUpdate: false,
    bool strict: true,
  }) async {
    assert(entityId != null);
    assert(detailId != null);
    final _row = await new _owl_sql_pg.SimpleSelect(
            schema: schema,
            table: table ?? 'entity_detail',
            columns: columns,
            where: <String, dynamic>{
              'entity_id': entityId,
              'detail_id': detailId
            },
            limit: (strict ? 2 : 1),
            forUpdate: forUpdate)
        .get(connection, strict: strict);
    return parseRow(_row);
  }

  /// Update a row in entity_detail.
  static Future<int> update(
    pg.PostgreSQLExecutionContext connection,
    EntityDetail entityDetail, {
    String schema,
    String table,
    List<String> clear,
    bool strict: true,
  }) async {
    final Map<String, dynamic> _set = map(entityDetail);
    final Map<String, dynamic> _where = <String, dynamic>{
      'entity_id': _set.remove('entity_id'),
      'detail_id': _set.remove('detail_id'),
    };
    return await new _owl_sql_pg.SimpleUpdate(
            schema: schema,
            table: table ?? 'entity_detail',
            set: _set,
            clear: clear,
            where: _where)
        .execute(connection, strict: strict);
  }

  /// Delete a row from entity_detail.
  static Future<int> delete(
    pg.PostgreSQLExecutionContext connection,
    int entityId,
    int detailId, {
    String schema,
    String table,
    bool strict: true,
  }) async {
    assert(entityId != null);
    assert(detailId != null);
    return await new _owl_sql_pg.SimpleDelete(
        schema: schema,
        table: table ?? 'entity_detail',
        where: <String, dynamic>{
          'entity_id': entityId,
          'detail_id': detailId
        }).execute(connection, strict: strict);
  }
}
