// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// HttpServerGenerator
// **************************************************************************

// Generated by owl 0.2.2
// https://github.com/agilord/owl

// ignore: unused_import, library_prefixes
import 'http_api_example.dart';
// ignore: unused_import, library_prefixes
import 'dart:async';
// ignore: unused_import, library_prefixes
import 'http_api_example.json.g.dart';
import 'dart:io' show HttpRequest, HttpResponse;
import 'dart:convert' as convert show utf8;

/// Server interface of Content.
abstract class ContentServer {
  /// GET /api/content/v1/ping
  Future<String> ping(HttpRequest httpRequest);

  /// GET /api/content/v1/greet/{greeting}/{name}
  Future<String> greet(HttpRequest httpRequest, String greeting, String name);

  /// GET /api/content/v1/article/{id:int}
  Future<Article> getArticle(HttpRequest httpRequest, int id);

  /// POST /api/content/v1/article/{id:int}
  Future<Status> postArticle(HttpRequest httpRequest, int id, Article article);

  /// DELETE /api/content/v1/article/{id:int}
  Future<Status> deleteArticle(HttpRequest httpRequest, int id);
}

/// HTTP handler of Content.
class ContentHttpHandler {
  final ContentServer _server;
  final RegExp _regexpGreet = new RegExp(r'^/api/content/v1/greet/(w+)/(w+)$');
  final RegExp _regexpGetArticle =
      new RegExp(r'^/api/content/v1/article/(d+)$');
  final RegExp _regexpPostArticle =
      new RegExp(r'^/api/content/v1/article/(d+)$');
  final RegExp _regexpDeleteArticle =
      new RegExp(r'^/api/content/v1/article/(d+)$');

  /// HTTP handler of Content.
  ContentHttpHandler(this._server);

  /// Tries to handle the request, returns a Future if the
  /// path matches any of the configured patterns.
  Future<Null> handle(HttpRequest httpRequest) {
    final String _path = httpRequest.uri.path;
    if (httpRequest.method == 'GET' && _path == '/api/content/v1/ping') {
      final Future<Null> f = _handlePing(httpRequest);
      if (f != null) return f;
    }
    if (httpRequest.method == 'GET' &&
        _path.startsWith('/api/content/v1/greet/')) {
      final Future<Null> f = _handleGreet(httpRequest);
      if (f != null) return f;
    }
    if (httpRequest.method == 'GET' &&
        _path.startsWith('/api/content/v1/article/')) {
      final Future<Null> f = _handleGetArticle(httpRequest);
      if (f != null) return f;
    }
    if (httpRequest.method == 'POST' &&
        _path.startsWith('/api/content/v1/article/')) {
      final Future<Null> f = _handlePostArticle(httpRequest);
      if (f != null) return f;
    }
    if (httpRequest.method == 'DELETE' &&
        _path.startsWith('/api/content/v1/article/')) {
      final Future<Null> f = _handleDeleteArticle(httpRequest);
      if (f != null) return f;
    }
    return null;
  }

  /// GET /api/content/v1/ping
  Future<Null> _handlePing(HttpRequest httpRequest) async {
    final String _result = await _server.ping(httpRequest);
    final HttpResponse _response = httpRequest.response;
    if (_result != null) {
      _response.write(_result);
    }
    await _response.flush();
    await _response.close();
  }

  /// GET /api/content/v1/greet/{greeting}/{name}
  Future<Null> _handleGreet(HttpRequest httpRequest) async {
    final Match match = _regexpGreet.matchAsPrefix(httpRequest.uri.path);
    if (match == null) return null;
    final String greeting = match[1];
    final String name = match[2];
    final String _result = await _server.greet(httpRequest, greeting, name);
    final HttpResponse _response = httpRequest.response;
    if (_result != null) {
      _response.write(_result);
    }
    await _response.flush();
    await _response.close();
  }

  /// GET /api/content/v1/article/{id:int}
  Future<Null> _handleGetArticle(HttpRequest httpRequest) async {
    final Match match = _regexpGetArticle.matchAsPrefix(httpRequest.uri.path);
    if (match == null) return null;
    final int id = int.parse(match[1]);
    final Article _result = await _server.getArticle(httpRequest, id);
    final HttpResponse _response = httpRequest.response;
    if (_result != null) {
      _response.write(ArticleMapper.toJson(_result));
    }
    await _response.flush();
    await _response.close();
  }

  /// POST /api/content/v1/article/{id:int}
  Future<Null> _handlePostArticle(HttpRequest httpRequest) async {
    final Match match = _regexpPostArticle.matchAsPrefix(httpRequest.uri.path);
    if (match == null) return null;
    final int id = int.parse(match[1]);
    final String _body = await convert.utf8.decodeStream(httpRequest);
    final Article article = ArticleMapper.fromJson(_body);
    final Status _result = await _server.postArticle(httpRequest, id, article);
    final HttpResponse _response = httpRequest.response;
    if (_result != null) {
      _response.write(StatusMapper.toJson(_result));
    }
    await _response.flush();
    await _response.close();
  }

  /// DELETE /api/content/v1/article/{id:int}
  Future<Null> _handleDeleteArticle(HttpRequest httpRequest) async {
    final Match match =
        _regexpDeleteArticle.matchAsPrefix(httpRequest.uri.path);
    if (match == null) return null;
    final int id = int.parse(match[1]);
    final Status _result = await _server.deleteArticle(httpRequest, id);
    final HttpResponse _response = httpRequest.response;
    if (_result != null) {
      _response.write(StatusMapper.toJson(_result));
    }
    await _response.flush();
    await _response.close();
  }
}
